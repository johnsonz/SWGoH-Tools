// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RequestEnvelope.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SWGOH.Models.Protocols {

  /// <summary>Holder for reflection information generated from RequestEnvelope.proto</summary>
  public static partial class RequestEnvelopeReflection {

    #region Descriptor
    /// <summary>File descriptor for RequestEnvelope.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RequestEnvelopeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVSZXF1ZXN0RW52ZWxvcGUucHJvdG8SFlNXR09ILk1vZGVscy5Qcm90b2Nv",
            "bHMaFEFjY2VwdEVuY29kaW5nLnByb3RvIswGCg9SZXF1ZXN0RW52ZWxvcGUS",
            "GAoNQ29ycmVsYXRpb25JZBgBIAEoAzoBMBITCgtTZXJ2aWNlTmFtZRgEIAEo",
            "CRISCgpNZXRob2ROYW1lGAUgASgJEg8KB1BheWxvYWQYBiABKAwSDgoGQXV0",
            "aElkGAcgASgJEhEKCUF1dGhUb2tlbhgIIAEoCRIVCg1DbGllbnRWZXJzaW9u",
            "GAkgASgDEh4KFkNsaWVudFN0YXJ0dXBUaW1lc3RhbXAYCyABKAMSFQoIUGxh",
            "dGZvcm0YDCABKAk6A0lPUxITCgZSZWdpb24YDSABKAk6A1JPVxIdChVDbGll",
            "bnRFeHRlcm5hbFZlcnNpb24YDiABKAkSHQoVQ2xpZW50SW50ZXJuYWxWZXJz",
            "aW9uGA8gASgJEhEKCVJlcXVlc3RJZBgQIAEoCRJSCg5BY2NlcHRFbmNvZGlu",
            "ZxgRIAEoDjImLlNXR09ILk1vZGVscy5Qcm90b2NvbHMuQWNjZXB0RW5jb2Rp",
            "bmc6EkdaSVBBQ0NFUFRFTkNPRElORxIZChFDdXJyZW50Q2xpZW50VGltZRgU",
            "IAEoAxIXCg9OaW1ibGVTZXNzaW9uSWQYFSABKAkSEAoIVGltZXpvbmUYFiAB",
            "KAkSFwoPRmlybXdhcmVWZXJzaW9uGBcgASgJEg8KB0NhcnJpZXIYGCABKAkS",
            "GAoNTmV0d29ya0FjY2VzcxgZIAEoCToBVxISCgpIYXJkd2FyZUlkGBogASgJ",
            "EhQKDEFkdmVydGlzZXJJZBgbIAEoCRIQCghWZW5kb3JJZBgcIAEoCRIRCglB",
            "bmRyb2lkSWQYHSABKAkSFgoOSmFpbGJyb2tlbkZsYWcYHiABKAMSEgoKUGly",
            "YWN5RmxhZxgfIAEoAxIRCglTeW5lcmd5SWQYICABKAkSEwoLRGV2aWNlTW9k",
            "ZWwYISABKAkSEAoIRGV2aWNlSWQYIiABKAkSewoCVUEYJSABKAk6b01vemls",
            "bGEvNS4wIChpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTRfNV8xIGxpa2UgTWFj",
            "IE9TIFgpIEFwcGxlV2ViS2l0LzYwNS4xLjE1IChLSFRNTCwgbGlrZSBHZWNr",
            "bykgTW9iaWxlLzE1RTE0OA=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SWGOH.Models.Protocols.AcceptEncodingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SWGOH.Models.Protocols.RequestEnvelope), global::SWGOH.Models.Protocols.RequestEnvelope.Parser, new[]{ "CorrelationId", "ServiceName", "MethodName", "Payload", "AuthId", "AuthToken", "ClientVersion", "ClientStartupTimestamp", "Platform", "Region", "ClientExternalVersion", "ClientInternalVersion", "RequestId", "AcceptEncoding", "CurrentClientTime", "NimbleSessionId", "Timezone", "FirmwareVersion", "Carrier", "NetworkAccess", "HardwareId", "AdvertiserId", "VendorId", "AndroidId", "JailbrokenFlag", "PiracyFlag", "SynergyId", "DeviceModel", "DeviceId", "UA" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RequestEnvelope : pb::IMessage<RequestEnvelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RequestEnvelope> _parser = new pb::MessageParser<RequestEnvelope>(() => new RequestEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SWGOH.Models.Protocols.RequestEnvelopeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEnvelope(RequestEnvelope other) : this() {
      _hasBits0 = other._hasBits0;
      correlationId_ = other.correlationId_;
      serviceName_ = other.serviceName_;
      methodName_ = other.methodName_;
      payload_ = other.payload_;
      authId_ = other.authId_;
      authToken_ = other.authToken_;
      clientVersion_ = other.clientVersion_;
      clientStartupTimestamp_ = other.clientStartupTimestamp_;
      platform_ = other.platform_;
      region_ = other.region_;
      clientExternalVersion_ = other.clientExternalVersion_;
      clientInternalVersion_ = other.clientInternalVersion_;
      requestId_ = other.requestId_;
      acceptEncoding_ = other.acceptEncoding_;
      currentClientTime_ = other.currentClientTime_;
      nimbleSessionId_ = other.nimbleSessionId_;
      timezone_ = other.timezone_;
      firmwareVersion_ = other.firmwareVersion_;
      carrier_ = other.carrier_;
      networkAccess_ = other.networkAccess_;
      hardwareId_ = other.hardwareId_;
      advertiserId_ = other.advertiserId_;
      vendorId_ = other.vendorId_;
      androidId_ = other.androidId_;
      jailbrokenFlag_ = other.jailbrokenFlag_;
      piracyFlag_ = other.piracyFlag_;
      synergyId_ = other.synergyId_;
      deviceModel_ = other.deviceModel_;
      deviceId_ = other.deviceId_;
      uA_ = other.uA_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEnvelope Clone() {
      return new RequestEnvelope(this);
    }

    /// <summary>Field number for the "CorrelationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private readonly static long CorrelationIdDefaultValue = 0L;

    private long correlationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CorrelationId {
      get { if ((_hasBits0 & 1) != 0) { return correlationId_; } else { return CorrelationIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        correlationId_ = value;
      }
    }
    /// <summary>Gets whether the "CorrelationId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCorrelationId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "CorrelationId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCorrelationId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ServiceName" field.</summary>
    public const int ServiceNameFieldNumber = 4;
    private readonly static string ServiceNameDefaultValue = "";

    private string serviceName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_ ?? ServiceNameDefaultValue; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ServiceName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServiceName {
      get { return serviceName_ != null; }
    }
    /// <summary>Clears the value of the "ServiceName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServiceName() {
      serviceName_ = null;
    }

    /// <summary>Field number for the "MethodName" field.</summary>
    public const int MethodNameFieldNumber = 5;
    private readonly static string MethodNameDefaultValue = "";

    private string methodName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_ ?? MethodNameDefaultValue; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "MethodName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMethodName {
      get { return methodName_ != null; }
    }
    /// <summary>Clears the value of the "MethodName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMethodName() {
      methodName_ = null;
    }

    /// <summary>Field number for the "Payload" field.</summary>
    public const int PayloadFieldNumber = 6;
    private readonly static pb::ByteString PayloadDefaultValue = pb::ByteString.Empty;

    private pb::ByteString payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_ ?? PayloadDefaultValue; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Payload" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPayload {
      get { return payload_ != null; }
    }
    /// <summary>Clears the value of the "Payload" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payload_ = null;
    }

    /// <summary>Field number for the "AuthId" field.</summary>
    public const int AuthIdFieldNumber = 7;
    private readonly static string AuthIdDefaultValue = "";

    private string authId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthId {
      get { return authId_ ?? AuthIdDefaultValue; }
      set {
        authId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "AuthId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthId {
      get { return authId_ != null; }
    }
    /// <summary>Clears the value of the "AuthId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthId() {
      authId_ = null;
    }

    /// <summary>Field number for the "AuthToken" field.</summary>
    public const int AuthTokenFieldNumber = 8;
    private readonly static string AuthTokenDefaultValue = "";

    private string authToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthToken {
      get { return authToken_ ?? AuthTokenDefaultValue; }
      set {
        authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "AuthToken" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthToken {
      get { return authToken_ != null; }
    }
    /// <summary>Clears the value of the "AuthToken" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthToken() {
      authToken_ = null;
    }

    /// <summary>Field number for the "ClientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 9;
    private readonly static long ClientVersionDefaultValue = 0L;

    private long clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientVersion {
      get { if ((_hasBits0 & 2) != 0) { return clientVersion_; } else { return ClientVersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clientVersion_ = value;
      }
    }
    /// <summary>Gets whether the "ClientVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ClientVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientVersion() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ClientStartupTimestamp" field.</summary>
    public const int ClientStartupTimestampFieldNumber = 11;
    private readonly static long ClientStartupTimestampDefaultValue = 0L;

    private long clientStartupTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientStartupTimestamp {
      get { if ((_hasBits0 & 4) != 0) { return clientStartupTimestamp_; } else { return ClientStartupTimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        clientStartupTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "ClientStartupTimestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientStartupTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ClientStartupTimestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientStartupTimestamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 12;
    private readonly static string PlatformDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("SU9T"), 0, 3);

    private string platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_ ?? PlatformDefaultValue; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Platform" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlatform {
      get { return platform_ != null; }
    }
    /// <summary>Clears the value of the "Platform" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlatform() {
      platform_ = null;
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 13;
    private readonly static string RegionDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("Uk9X"), 0, 3);

    private string region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_ ?? RegionDefaultValue; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Region" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegion {
      get { return region_ != null; }
    }
    /// <summary>Clears the value of the "Region" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegion() {
      region_ = null;
    }

    /// <summary>Field number for the "ClientExternalVersion" field.</summary>
    public const int ClientExternalVersionFieldNumber = 14;
    private readonly static string ClientExternalVersionDefaultValue = "";

    private string clientExternalVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientExternalVersion {
      get { return clientExternalVersion_ ?? ClientExternalVersionDefaultValue; }
      set {
        clientExternalVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ClientExternalVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientExternalVersion {
      get { return clientExternalVersion_ != null; }
    }
    /// <summary>Clears the value of the "ClientExternalVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientExternalVersion() {
      clientExternalVersion_ = null;
    }

    /// <summary>Field number for the "ClientInternalVersion" field.</summary>
    public const int ClientInternalVersionFieldNumber = 15;
    private readonly static string ClientInternalVersionDefaultValue = "";

    private string clientInternalVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientInternalVersion {
      get { return clientInternalVersion_ ?? ClientInternalVersionDefaultValue; }
      set {
        clientInternalVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ClientInternalVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientInternalVersion {
      get { return clientInternalVersion_ != null; }
    }
    /// <summary>Clears the value of the "ClientInternalVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientInternalVersion() {
      clientInternalVersion_ = null;
    }

    /// <summary>Field number for the "RequestId" field.</summary>
    public const int RequestIdFieldNumber = 16;
    private readonly static string RequestIdDefaultValue = "";

    private string requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_ ?? RequestIdDefaultValue; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "RequestId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return requestId_ != null; }
    }
    /// <summary>Clears the value of the "RequestId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      requestId_ = null;
    }

    /// <summary>Field number for the "AcceptEncoding" field.</summary>
    public const int AcceptEncodingFieldNumber = 17;
    private readonly static global::SWGOH.Models.Protocols.AcceptEncoding AcceptEncodingDefaultValue = global::SWGOH.Models.Protocols.AcceptEncoding.Gzipacceptencoding;

    private global::SWGOH.Models.Protocols.AcceptEncoding acceptEncoding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SWGOH.Models.Protocols.AcceptEncoding AcceptEncoding {
      get { if ((_hasBits0 & 8) != 0) { return acceptEncoding_; } else { return AcceptEncodingDefaultValue; } }
      set {
        _hasBits0 |= 8;
        acceptEncoding_ = value;
      }
    }
    /// <summary>Gets whether the "AcceptEncoding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAcceptEncoding {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "AcceptEncoding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAcceptEncoding() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "CurrentClientTime" field.</summary>
    public const int CurrentClientTimeFieldNumber = 20;
    private readonly static long CurrentClientTimeDefaultValue = 0L;

    private long currentClientTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentClientTime {
      get { if ((_hasBits0 & 16) != 0) { return currentClientTime_; } else { return CurrentClientTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        currentClientTime_ = value;
      }
    }
    /// <summary>Gets whether the "CurrentClientTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentClientTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "CurrentClientTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentClientTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "NimbleSessionId" field.</summary>
    public const int NimbleSessionIdFieldNumber = 21;
    private readonly static string NimbleSessionIdDefaultValue = "";

    private string nimbleSessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NimbleSessionId {
      get { return nimbleSessionId_ ?? NimbleSessionIdDefaultValue; }
      set {
        nimbleSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "NimbleSessionId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNimbleSessionId {
      get { return nimbleSessionId_ != null; }
    }
    /// <summary>Clears the value of the "NimbleSessionId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNimbleSessionId() {
      nimbleSessionId_ = null;
    }

    /// <summary>Field number for the "Timezone" field.</summary>
    public const int TimezoneFieldNumber = 22;
    private readonly static string TimezoneDefaultValue = "";

    private string timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_ ?? TimezoneDefaultValue; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimezone {
      get { return timezone_ != null; }
    }
    /// <summary>Clears the value of the "Timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimezone() {
      timezone_ = null;
    }

    /// <summary>Field number for the "FirmwareVersion" field.</summary>
    public const int FirmwareVersionFieldNumber = 23;
    private readonly static string FirmwareVersionDefaultValue = "";

    private string firmwareVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirmwareVersion {
      get { return firmwareVersion_ ?? FirmwareVersionDefaultValue; }
      set {
        firmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "FirmwareVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirmwareVersion {
      get { return firmwareVersion_ != null; }
    }
    /// <summary>Clears the value of the "FirmwareVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirmwareVersion() {
      firmwareVersion_ = null;
    }

    /// <summary>Field number for the "Carrier" field.</summary>
    public const int CarrierFieldNumber = 24;
    private readonly static string CarrierDefaultValue = "";

    private string carrier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Carrier {
      get { return carrier_ ?? CarrierDefaultValue; }
      set {
        carrier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Carrier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCarrier {
      get { return carrier_ != null; }
    }
    /// <summary>Clears the value of the "Carrier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCarrier() {
      carrier_ = null;
    }

    /// <summary>Field number for the "NetworkAccess" field.</summary>
    public const int NetworkAccessFieldNumber = 25;
    private readonly static string NetworkAccessDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("Vw=="), 0, 1);

    private string networkAccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkAccess {
      get { return networkAccess_ ?? NetworkAccessDefaultValue; }
      set {
        networkAccess_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "NetworkAccess" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNetworkAccess {
      get { return networkAccess_ != null; }
    }
    /// <summary>Clears the value of the "NetworkAccess" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNetworkAccess() {
      networkAccess_ = null;
    }

    /// <summary>Field number for the "HardwareId" field.</summary>
    public const int HardwareIdFieldNumber = 26;
    private readonly static string HardwareIdDefaultValue = "";

    private string hardwareId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HardwareId {
      get { return hardwareId_ ?? HardwareIdDefaultValue; }
      set {
        hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "HardwareId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHardwareId {
      get { return hardwareId_ != null; }
    }
    /// <summary>Clears the value of the "HardwareId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHardwareId() {
      hardwareId_ = null;
    }

    /// <summary>Field number for the "AdvertiserId" field.</summary>
    public const int AdvertiserIdFieldNumber = 27;
    private readonly static string AdvertiserIdDefaultValue = "";

    private string advertiserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdvertiserId {
      get { return advertiserId_ ?? AdvertiserIdDefaultValue; }
      set {
        advertiserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "AdvertiserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdvertiserId {
      get { return advertiserId_ != null; }
    }
    /// <summary>Clears the value of the "AdvertiserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdvertiserId() {
      advertiserId_ = null;
    }

    /// <summary>Field number for the "VendorId" field.</summary>
    public const int VendorIdFieldNumber = 28;
    private readonly static string VendorIdDefaultValue = "";

    private string vendorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VendorId {
      get { return vendorId_ ?? VendorIdDefaultValue; }
      set {
        vendorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "VendorId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVendorId {
      get { return vendorId_ != null; }
    }
    /// <summary>Clears the value of the "VendorId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVendorId() {
      vendorId_ = null;
    }

    /// <summary>Field number for the "AndroidId" field.</summary>
    public const int AndroidIdFieldNumber = 29;
    private readonly static string AndroidIdDefaultValue = "";

    private string androidId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AndroidId {
      get { return androidId_ ?? AndroidIdDefaultValue; }
      set {
        androidId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "AndroidId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAndroidId {
      get { return androidId_ != null; }
    }
    /// <summary>Clears the value of the "AndroidId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAndroidId() {
      androidId_ = null;
    }

    /// <summary>Field number for the "JailbrokenFlag" field.</summary>
    public const int JailbrokenFlagFieldNumber = 30;
    private readonly static long JailbrokenFlagDefaultValue = 0L;

    private long jailbrokenFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JailbrokenFlag {
      get { if ((_hasBits0 & 32) != 0) { return jailbrokenFlag_; } else { return JailbrokenFlagDefaultValue; } }
      set {
        _hasBits0 |= 32;
        jailbrokenFlag_ = value;
      }
    }
    /// <summary>Gets whether the "JailbrokenFlag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJailbrokenFlag {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "JailbrokenFlag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJailbrokenFlag() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "PiracyFlag" field.</summary>
    public const int PiracyFlagFieldNumber = 31;
    private readonly static long PiracyFlagDefaultValue = 0L;

    private long piracyFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PiracyFlag {
      get { if ((_hasBits0 & 64) != 0) { return piracyFlag_; } else { return PiracyFlagDefaultValue; } }
      set {
        _hasBits0 |= 64;
        piracyFlag_ = value;
      }
    }
    /// <summary>Gets whether the "PiracyFlag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPiracyFlag {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "PiracyFlag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPiracyFlag() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "SynergyId" field.</summary>
    public const int SynergyIdFieldNumber = 32;
    private readonly static string SynergyIdDefaultValue = "";

    private string synergyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SynergyId {
      get { return synergyId_ ?? SynergyIdDefaultValue; }
      set {
        synergyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "SynergyId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSynergyId {
      get { return synergyId_ != null; }
    }
    /// <summary>Clears the value of the "SynergyId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSynergyId() {
      synergyId_ = null;
    }

    /// <summary>Field number for the "DeviceModel" field.</summary>
    public const int DeviceModelFieldNumber = 33;
    private readonly static string DeviceModelDefaultValue = "";

    private string deviceModel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceModel {
      get { return deviceModel_ ?? DeviceModelDefaultValue; }
      set {
        deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "DeviceModel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeviceModel {
      get { return deviceModel_ != null; }
    }
    /// <summary>Clears the value of the "DeviceModel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeviceModel() {
      deviceModel_ = null;
    }

    /// <summary>Field number for the "DeviceId" field.</summary>
    public const int DeviceIdFieldNumber = 34;
    private readonly static string DeviceIdDefaultValue = "";

    private string deviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_ ?? DeviceIdDefaultValue; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "DeviceId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeviceId {
      get { return deviceId_ != null; }
    }
    /// <summary>Clears the value of the "DeviceId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeviceId() {
      deviceId_ = null;
    }

    /// <summary>Field number for the "UA" field.</summary>
    public const int UAFieldNumber = 37;
    private readonly static string UADefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("TW96aWxsYS81LjAgKGlQaG9uZTsgQ1BVIGlQaG9uZSBPUyAxNF81XzEgbGlrZSBNYWMgT1MgWCkgQXBwbGVXZWJLaXQvNjA1LjEuMTUgKEtIVE1MLCBsaWtlIEdlY2tvKSBNb2JpbGUvMTVFMTQ4"), 0, 111);

    private string uA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UA {
      get { return uA_ ?? UADefaultValue; }
      set {
        uA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "UA" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUA {
      get { return uA_ != null; }
    }
    /// <summary>Clears the value of the "UA" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUA() {
      uA_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if (ServiceName != other.ServiceName) return false;
      if (MethodName != other.MethodName) return false;
      if (Payload != other.Payload) return false;
      if (AuthId != other.AuthId) return false;
      if (AuthToken != other.AuthToken) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (ClientStartupTimestamp != other.ClientStartupTimestamp) return false;
      if (Platform != other.Platform) return false;
      if (Region != other.Region) return false;
      if (ClientExternalVersion != other.ClientExternalVersion) return false;
      if (ClientInternalVersion != other.ClientInternalVersion) return false;
      if (RequestId != other.RequestId) return false;
      if (AcceptEncoding != other.AcceptEncoding) return false;
      if (CurrentClientTime != other.CurrentClientTime) return false;
      if (NimbleSessionId != other.NimbleSessionId) return false;
      if (Timezone != other.Timezone) return false;
      if (FirmwareVersion != other.FirmwareVersion) return false;
      if (Carrier != other.Carrier) return false;
      if (NetworkAccess != other.NetworkAccess) return false;
      if (HardwareId != other.HardwareId) return false;
      if (AdvertiserId != other.AdvertiserId) return false;
      if (VendorId != other.VendorId) return false;
      if (AndroidId != other.AndroidId) return false;
      if (JailbrokenFlag != other.JailbrokenFlag) return false;
      if (PiracyFlag != other.PiracyFlag) return false;
      if (SynergyId != other.SynergyId) return false;
      if (DeviceModel != other.DeviceModel) return false;
      if (DeviceId != other.DeviceId) return false;
      if (UA != other.UA) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCorrelationId) hash ^= CorrelationId.GetHashCode();
      if (HasServiceName) hash ^= ServiceName.GetHashCode();
      if (HasMethodName) hash ^= MethodName.GetHashCode();
      if (HasPayload) hash ^= Payload.GetHashCode();
      if (HasAuthId) hash ^= AuthId.GetHashCode();
      if (HasAuthToken) hash ^= AuthToken.GetHashCode();
      if (HasClientVersion) hash ^= ClientVersion.GetHashCode();
      if (HasClientStartupTimestamp) hash ^= ClientStartupTimestamp.GetHashCode();
      if (HasPlatform) hash ^= Platform.GetHashCode();
      if (HasRegion) hash ^= Region.GetHashCode();
      if (HasClientExternalVersion) hash ^= ClientExternalVersion.GetHashCode();
      if (HasClientInternalVersion) hash ^= ClientInternalVersion.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasAcceptEncoding) hash ^= AcceptEncoding.GetHashCode();
      if (HasCurrentClientTime) hash ^= CurrentClientTime.GetHashCode();
      if (HasNimbleSessionId) hash ^= NimbleSessionId.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      if (HasFirmwareVersion) hash ^= FirmwareVersion.GetHashCode();
      if (HasCarrier) hash ^= Carrier.GetHashCode();
      if (HasNetworkAccess) hash ^= NetworkAccess.GetHashCode();
      if (HasHardwareId) hash ^= HardwareId.GetHashCode();
      if (HasAdvertiserId) hash ^= AdvertiserId.GetHashCode();
      if (HasVendorId) hash ^= VendorId.GetHashCode();
      if (HasAndroidId) hash ^= AndroidId.GetHashCode();
      if (HasJailbrokenFlag) hash ^= JailbrokenFlag.GetHashCode();
      if (HasPiracyFlag) hash ^= PiracyFlag.GetHashCode();
      if (HasSynergyId) hash ^= SynergyId.GetHashCode();
      if (HasDeviceModel) hash ^= DeviceModel.GetHashCode();
      if (HasDeviceId) hash ^= DeviceId.GetHashCode();
      if (HasUA) hash ^= UA.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCorrelationId) {
        output.WriteRawTag(8);
        output.WriteInt64(CorrelationId);
      }
      if (HasServiceName) {
        output.WriteRawTag(34);
        output.WriteString(ServiceName);
      }
      if (HasMethodName) {
        output.WriteRawTag(42);
        output.WriteString(MethodName);
      }
      if (HasPayload) {
        output.WriteRawTag(50);
        output.WriteBytes(Payload);
      }
      if (HasAuthId) {
        output.WriteRawTag(58);
        output.WriteString(AuthId);
      }
      if (HasAuthToken) {
        output.WriteRawTag(66);
        output.WriteString(AuthToken);
      }
      if (HasClientVersion) {
        output.WriteRawTag(72);
        output.WriteInt64(ClientVersion);
      }
      if (HasClientStartupTimestamp) {
        output.WriteRawTag(88);
        output.WriteInt64(ClientStartupTimestamp);
      }
      if (HasPlatform) {
        output.WriteRawTag(98);
        output.WriteString(Platform);
      }
      if (HasRegion) {
        output.WriteRawTag(106);
        output.WriteString(Region);
      }
      if (HasClientExternalVersion) {
        output.WriteRawTag(114);
        output.WriteString(ClientExternalVersion);
      }
      if (HasClientInternalVersion) {
        output.WriteRawTag(122);
        output.WriteString(ClientInternalVersion);
      }
      if (HasRequestId) {
        output.WriteRawTag(130, 1);
        output.WriteString(RequestId);
      }
      if (HasAcceptEncoding) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) AcceptEncoding);
      }
      if (HasCurrentClientTime) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(CurrentClientTime);
      }
      if (HasNimbleSessionId) {
        output.WriteRawTag(170, 1);
        output.WriteString(NimbleSessionId);
      }
      if (HasTimezone) {
        output.WriteRawTag(178, 1);
        output.WriteString(Timezone);
      }
      if (HasFirmwareVersion) {
        output.WriteRawTag(186, 1);
        output.WriteString(FirmwareVersion);
      }
      if (HasCarrier) {
        output.WriteRawTag(194, 1);
        output.WriteString(Carrier);
      }
      if (HasNetworkAccess) {
        output.WriteRawTag(202, 1);
        output.WriteString(NetworkAccess);
      }
      if (HasHardwareId) {
        output.WriteRawTag(210, 1);
        output.WriteString(HardwareId);
      }
      if (HasAdvertiserId) {
        output.WriteRawTag(218, 1);
        output.WriteString(AdvertiserId);
      }
      if (HasVendorId) {
        output.WriteRawTag(226, 1);
        output.WriteString(VendorId);
      }
      if (HasAndroidId) {
        output.WriteRawTag(234, 1);
        output.WriteString(AndroidId);
      }
      if (HasJailbrokenFlag) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(JailbrokenFlag);
      }
      if (HasPiracyFlag) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(PiracyFlag);
      }
      if (HasSynergyId) {
        output.WriteRawTag(130, 2);
        output.WriteString(SynergyId);
      }
      if (HasDeviceModel) {
        output.WriteRawTag(138, 2);
        output.WriteString(DeviceModel);
      }
      if (HasDeviceId) {
        output.WriteRawTag(146, 2);
        output.WriteString(DeviceId);
      }
      if (HasUA) {
        output.WriteRawTag(170, 2);
        output.WriteString(UA);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCorrelationId) {
        output.WriteRawTag(8);
        output.WriteInt64(CorrelationId);
      }
      if (HasServiceName) {
        output.WriteRawTag(34);
        output.WriteString(ServiceName);
      }
      if (HasMethodName) {
        output.WriteRawTag(42);
        output.WriteString(MethodName);
      }
      if (HasPayload) {
        output.WriteRawTag(50);
        output.WriteBytes(Payload);
      }
      if (HasAuthId) {
        output.WriteRawTag(58);
        output.WriteString(AuthId);
      }
      if (HasAuthToken) {
        output.WriteRawTag(66);
        output.WriteString(AuthToken);
      }
      if (HasClientVersion) {
        output.WriteRawTag(72);
        output.WriteInt64(ClientVersion);
      }
      if (HasClientStartupTimestamp) {
        output.WriteRawTag(88);
        output.WriteInt64(ClientStartupTimestamp);
      }
      if (HasPlatform) {
        output.WriteRawTag(98);
        output.WriteString(Platform);
      }
      if (HasRegion) {
        output.WriteRawTag(106);
        output.WriteString(Region);
      }
      if (HasClientExternalVersion) {
        output.WriteRawTag(114);
        output.WriteString(ClientExternalVersion);
      }
      if (HasClientInternalVersion) {
        output.WriteRawTag(122);
        output.WriteString(ClientInternalVersion);
      }
      if (HasRequestId) {
        output.WriteRawTag(130, 1);
        output.WriteString(RequestId);
      }
      if (HasAcceptEncoding) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) AcceptEncoding);
      }
      if (HasCurrentClientTime) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(CurrentClientTime);
      }
      if (HasNimbleSessionId) {
        output.WriteRawTag(170, 1);
        output.WriteString(NimbleSessionId);
      }
      if (HasTimezone) {
        output.WriteRawTag(178, 1);
        output.WriteString(Timezone);
      }
      if (HasFirmwareVersion) {
        output.WriteRawTag(186, 1);
        output.WriteString(FirmwareVersion);
      }
      if (HasCarrier) {
        output.WriteRawTag(194, 1);
        output.WriteString(Carrier);
      }
      if (HasNetworkAccess) {
        output.WriteRawTag(202, 1);
        output.WriteString(NetworkAccess);
      }
      if (HasHardwareId) {
        output.WriteRawTag(210, 1);
        output.WriteString(HardwareId);
      }
      if (HasAdvertiserId) {
        output.WriteRawTag(218, 1);
        output.WriteString(AdvertiserId);
      }
      if (HasVendorId) {
        output.WriteRawTag(226, 1);
        output.WriteString(VendorId);
      }
      if (HasAndroidId) {
        output.WriteRawTag(234, 1);
        output.WriteString(AndroidId);
      }
      if (HasJailbrokenFlag) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(JailbrokenFlag);
      }
      if (HasPiracyFlag) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(PiracyFlag);
      }
      if (HasSynergyId) {
        output.WriteRawTag(130, 2);
        output.WriteString(SynergyId);
      }
      if (HasDeviceModel) {
        output.WriteRawTag(138, 2);
        output.WriteString(DeviceModel);
      }
      if (HasDeviceId) {
        output.WriteRawTag(146, 2);
        output.WriteString(DeviceId);
      }
      if (HasUA) {
        output.WriteRawTag(170, 2);
        output.WriteString(UA);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCorrelationId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CorrelationId);
      }
      if (HasServiceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (HasMethodName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (HasPayload) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (HasAuthId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthId);
      }
      if (HasAuthToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
      }
      if (HasClientVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientVersion);
      }
      if (HasClientStartupTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientStartupTimestamp);
      }
      if (HasPlatform) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (HasRegion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (HasClientExternalVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientExternalVersion);
      }
      if (HasClientInternalVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientInternalVersion);
      }
      if (HasRequestId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (HasAcceptEncoding) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AcceptEncoding);
      }
      if (HasCurrentClientTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CurrentClientTime);
      }
      if (HasNimbleSessionId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NimbleSessionId);
      }
      if (HasTimezone) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (HasFirmwareVersion) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirmwareVersion);
      }
      if (HasCarrier) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Carrier);
      }
      if (HasNetworkAccess) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NetworkAccess);
      }
      if (HasHardwareId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
      }
      if (HasAdvertiserId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdvertiserId);
      }
      if (HasVendorId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VendorId);
      }
      if (HasAndroidId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AndroidId);
      }
      if (HasJailbrokenFlag) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(JailbrokenFlag);
      }
      if (HasPiracyFlag) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PiracyFlag);
      }
      if (HasSynergyId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SynergyId);
      }
      if (HasDeviceModel) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
      }
      if (HasDeviceId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (HasUA) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UA);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.HasCorrelationId) {
        CorrelationId = other.CorrelationId;
      }
      if (other.HasServiceName) {
        ServiceName = other.ServiceName;
      }
      if (other.HasMethodName) {
        MethodName = other.MethodName;
      }
      if (other.HasPayload) {
        Payload = other.Payload;
      }
      if (other.HasAuthId) {
        AuthId = other.AuthId;
      }
      if (other.HasAuthToken) {
        AuthToken = other.AuthToken;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      if (other.HasClientStartupTimestamp) {
        ClientStartupTimestamp = other.ClientStartupTimestamp;
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasRegion) {
        Region = other.Region;
      }
      if (other.HasClientExternalVersion) {
        ClientExternalVersion = other.ClientExternalVersion;
      }
      if (other.HasClientInternalVersion) {
        ClientInternalVersion = other.ClientInternalVersion;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasAcceptEncoding) {
        AcceptEncoding = other.AcceptEncoding;
      }
      if (other.HasCurrentClientTime) {
        CurrentClientTime = other.CurrentClientTime;
      }
      if (other.HasNimbleSessionId) {
        NimbleSessionId = other.NimbleSessionId;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      if (other.HasFirmwareVersion) {
        FirmwareVersion = other.FirmwareVersion;
      }
      if (other.HasCarrier) {
        Carrier = other.Carrier;
      }
      if (other.HasNetworkAccess) {
        NetworkAccess = other.NetworkAccess;
      }
      if (other.HasHardwareId) {
        HardwareId = other.HardwareId;
      }
      if (other.HasAdvertiserId) {
        AdvertiserId = other.AdvertiserId;
      }
      if (other.HasVendorId) {
        VendorId = other.VendorId;
      }
      if (other.HasAndroidId) {
        AndroidId = other.AndroidId;
      }
      if (other.HasJailbrokenFlag) {
        JailbrokenFlag = other.JailbrokenFlag;
      }
      if (other.HasPiracyFlag) {
        PiracyFlag = other.PiracyFlag;
      }
      if (other.HasSynergyId) {
        SynergyId = other.SynergyId;
      }
      if (other.HasDeviceModel) {
        DeviceModel = other.DeviceModel;
      }
      if (other.HasDeviceId) {
        DeviceId = other.DeviceId;
      }
      if (other.HasUA) {
        UA = other.UA;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CorrelationId = input.ReadInt64();
            break;
          }
          case 34: {
            ServiceName = input.ReadString();
            break;
          }
          case 42: {
            MethodName = input.ReadString();
            break;
          }
          case 50: {
            Payload = input.ReadBytes();
            break;
          }
          case 58: {
            AuthId = input.ReadString();
            break;
          }
          case 66: {
            AuthToken = input.ReadString();
            break;
          }
          case 72: {
            ClientVersion = input.ReadInt64();
            break;
          }
          case 88: {
            ClientStartupTimestamp = input.ReadInt64();
            break;
          }
          case 98: {
            Platform = input.ReadString();
            break;
          }
          case 106: {
            Region = input.ReadString();
            break;
          }
          case 114: {
            ClientExternalVersion = input.ReadString();
            break;
          }
          case 122: {
            ClientInternalVersion = input.ReadString();
            break;
          }
          case 130: {
            RequestId = input.ReadString();
            break;
          }
          case 136: {
            AcceptEncoding = (global::SWGOH.Models.Protocols.AcceptEncoding) input.ReadEnum();
            break;
          }
          case 160: {
            CurrentClientTime = input.ReadInt64();
            break;
          }
          case 170: {
            NimbleSessionId = input.ReadString();
            break;
          }
          case 178: {
            Timezone = input.ReadString();
            break;
          }
          case 186: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 194: {
            Carrier = input.ReadString();
            break;
          }
          case 202: {
            NetworkAccess = input.ReadString();
            break;
          }
          case 210: {
            HardwareId = input.ReadString();
            break;
          }
          case 218: {
            AdvertiserId = input.ReadString();
            break;
          }
          case 226: {
            VendorId = input.ReadString();
            break;
          }
          case 234: {
            AndroidId = input.ReadString();
            break;
          }
          case 240: {
            JailbrokenFlag = input.ReadInt64();
            break;
          }
          case 248: {
            PiracyFlag = input.ReadInt64();
            break;
          }
          case 258: {
            SynergyId = input.ReadString();
            break;
          }
          case 266: {
            DeviceModel = input.ReadString();
            break;
          }
          case 274: {
            DeviceId = input.ReadString();
            break;
          }
          case 298: {
            UA = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CorrelationId = input.ReadInt64();
            break;
          }
          case 34: {
            ServiceName = input.ReadString();
            break;
          }
          case 42: {
            MethodName = input.ReadString();
            break;
          }
          case 50: {
            Payload = input.ReadBytes();
            break;
          }
          case 58: {
            AuthId = input.ReadString();
            break;
          }
          case 66: {
            AuthToken = input.ReadString();
            break;
          }
          case 72: {
            ClientVersion = input.ReadInt64();
            break;
          }
          case 88: {
            ClientStartupTimestamp = input.ReadInt64();
            break;
          }
          case 98: {
            Platform = input.ReadString();
            break;
          }
          case 106: {
            Region = input.ReadString();
            break;
          }
          case 114: {
            ClientExternalVersion = input.ReadString();
            break;
          }
          case 122: {
            ClientInternalVersion = input.ReadString();
            break;
          }
          case 130: {
            RequestId = input.ReadString();
            break;
          }
          case 136: {
            AcceptEncoding = (global::SWGOH.Models.Protocols.AcceptEncoding) input.ReadEnum();
            break;
          }
          case 160: {
            CurrentClientTime = input.ReadInt64();
            break;
          }
          case 170: {
            NimbleSessionId = input.ReadString();
            break;
          }
          case 178: {
            Timezone = input.ReadString();
            break;
          }
          case 186: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 194: {
            Carrier = input.ReadString();
            break;
          }
          case 202: {
            NetworkAccess = input.ReadString();
            break;
          }
          case 210: {
            HardwareId = input.ReadString();
            break;
          }
          case 218: {
            AdvertiserId = input.ReadString();
            break;
          }
          case 226: {
            VendorId = input.ReadString();
            break;
          }
          case 234: {
            AndroidId = input.ReadString();
            break;
          }
          case 240: {
            JailbrokenFlag = input.ReadInt64();
            break;
          }
          case 248: {
            PiracyFlag = input.ReadInt64();
            break;
          }
          case 258: {
            SynergyId = input.ReadString();
            break;
          }
          case 266: {
            DeviceModel = input.ReadString();
            break;
          }
          case 274: {
            DeviceId = input.ReadString();
            break;
          }
          case 298: {
            UA = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
